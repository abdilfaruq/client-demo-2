{"ast":null,"code":"import { REQUEST_USER_DATA_SUCCESS, REQUEST_USER_DATA_FAILED, REG_INPUT_EMAIL, REG_INPUT_FIRST_NAME, REG_INPUT_LAST_NAME, REG_INPUT_PASSWORD, REG_SUCCESS, REG_FAILED, REG_LOADING, SET_EMAIL, SET_PASSWORD, USER_LOGOUT } from './constants';\nimport Axios from 'axios';\nimport { store } from '../index';\nexport const setEmail = text => ({\n  type: SET_EMAIL,\n  payload: text\n});\nexport const setPassword = password => ({\n  type: SET_PASSWORD,\n  payload: password\n});\nexport const inputRegFirstName = text => ({\n  type: REG_INPUT_FIRST_NAME,\n  payload: text\n});\nexport const inputRegLastName = text => ({\n  type: REG_INPUT_LAST_NAME,\n  payload: text\n});\nexport const inputRegEmail = email => ({\n  type: REG_INPUT_EMAIL,\n  payload: email\n});\nexport const inputRegPassword = password => ({\n  type: REG_INPUT_PASSWORD,\n  payload: password\n});\nexport const registerUser = () => async dispatch => {\n  let data = await Axios({\n    method: 'POST',\n    data: {\n      firstName: store.getState().inputRegisterDetails.firstName,\n      lastName: store.getState().inputRegisterDetails.lastName,\n      email: store.getState().inputRegisterDetails.email,\n      password: store.getState().inputRegisterDetails.password\n    },\n    withCredentials: true,\n    url: \"http://localhost:5000/users/register\"\n  });\n  let resp = await data;\n  dispatch({\n    type: REG_LOADING,\n    payload: true\n  });\n\n  if (resp.message === \"Registration successful\") {\n    dispatch({\n      type: REG_SUCCESS,\n      payload: resp.message\n    });\n    dispatch({\n      type: REG_LOADING,\n      payload: false\n    });\n  } else {\n    dispatch({\n      type: REG_FAILED,\n      payload: resp.message\n    });\n    dispatch({\n      type: REG_LOADING,\n      payload: false\n    });\n  }\n};\nexport const logoutUser = () => async dispatch => {\n  let logout = await localStorage.removeItem('linguo-state.requestUserData');\n  let resp = await logout;\n\n  try {\n    dispatch({\n      type: USER_LOGOUT,\n      payload: resp\n    });\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const requestUserData = () => async dispatch => {\n  let data = await Axios({\n    method: \"POST\",\n    data: {\n      email: store.getState().inputLoginDetails.email,\n      password: store.getState().inputLoginDetails.password\n    },\n    withCredentials: true,\n    url: \"http://localhost:5000/users/authenticate\"\n  });\n  let resp = await data;\n\n  if (resp.data.id) {\n    dispatch({\n      type: REQUEST_USER_DATA_SUCCESS,\n      payload: resp.data\n    });\n  } else {\n    dispatch({\n      type: REQUEST_USER_DATA_FAILED,\n      payload: 'Incorrect email or password'\n    });\n  }\n};","map":{"version":3,"sources":["D:/Coding/Learning/ReactJS/home6/src/redux/actions.jsx"],"names":["REQUEST_USER_DATA_SUCCESS","REQUEST_USER_DATA_FAILED","REG_INPUT_EMAIL","REG_INPUT_FIRST_NAME","REG_INPUT_LAST_NAME","REG_INPUT_PASSWORD","REG_SUCCESS","REG_FAILED","REG_LOADING","SET_EMAIL","SET_PASSWORD","USER_LOGOUT","Axios","store","setEmail","text","type","payload","setPassword","password","inputRegFirstName","inputRegLastName","inputRegEmail","email","inputRegPassword","registerUser","dispatch","data","method","firstName","getState","inputRegisterDetails","lastName","withCredentials","url","resp","message","logoutUser","logout","localStorage","removeItem","err","console","log","requestUserData","inputLoginDetails","id"],"mappings":"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","sourcesContent":["import {\r\n    REQUEST_USER_DATA_SUCCESS,\r\n    REQUEST_USER_DATA_FAILED,\r\n    REG_INPUT_EMAIL,\r\n    REG_INPUT_FIRST_NAME,\r\n    REG_INPUT_LAST_NAME,\r\n    REG_INPUT_PASSWORD,\r\n    REG_SUCCESS,\r\n    REG_FAILED,\r\n    REG_LOADING,\r\n    SET_EMAIL,\r\n    SET_PASSWORD,\r\n    USER_LOGOUT\r\n} from './constants';\r\nimport Axios from 'axios';\r\nimport { store } from '../index';\r\n\r\nexport const setEmail = (text) => ({\r\n    type: SET_EMAIL,\r\n    payload: text\r\n})\r\n\r\nexport const setPassword = (password) => ({\r\n    type: SET_PASSWORD,\r\n    payload: password\r\n})\r\n\r\nexport const inputRegFirstName = (text) => ({\r\n    type: REG_INPUT_FIRST_NAME,\r\n    payload: text\r\n})\r\n\r\nexport const inputRegLastName = (text) => ({\r\n    type: REG_INPUT_LAST_NAME,\r\n    payload: text\r\n})\r\n\r\nexport const inputRegEmail = (email) => ({\r\n    type: REG_INPUT_EMAIL,\r\n    payload: email\r\n})\r\n\r\nexport const inputRegPassword = (password) => ({\r\n    type: REG_INPUT_PASSWORD,\r\n    payload: password\r\n})\r\n\r\nexport const registerUser = () => async (dispatch) => {\r\n    let data = await Axios({\r\n        method: 'POST',\r\n        data: {\r\n            firstName: store.getState().inputRegisterDetails.firstName,\r\n            lastName: store.getState().inputRegisterDetails.lastName,\r\n            email: store.getState().inputRegisterDetails.email,\r\n            password: store.getState().inputRegisterDetails.password\r\n        },\r\n        withCredentials: true,\r\n        url: \"http://localhost:5000/users/register\"\r\n        })\r\n    let resp = await data;\r\n    dispatch({\r\n        type: REG_LOADING, payload: true\r\n    })\r\n    if (resp.message === \"Registration successful\") {\r\n        dispatch({\r\n            type: REG_SUCCESS, payload: resp.message\r\n        });\r\n        dispatch({\r\n            type: REG_LOADING, payload: false \r\n        })\r\n    } else {\r\n        dispatch({\r\n            type: REG_FAILED, payload: resp.message\r\n        });\r\n        dispatch({\r\n            type: REG_LOADING, payload: false\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport const logoutUser = () => async (dispatch) => {\r\n    let logout = await localStorage.removeItem('linguo-state.requestUserData');\r\n    let resp = await logout;\r\n    try {\r\n        dispatch({\r\n            type: USER_LOGOUT, payload: resp\r\n        })\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n}\r\n\r\nexport const requestUserData = () => async (dispatch) => {\r\n    let data = await Axios({\r\n        method: \"POST\",\r\n        data: {\r\n            email: store.getState().inputLoginDetails.email,\r\n            password: store.getState().inputLoginDetails.password,\r\n        },\r\n        withCredentials: true,\r\n        url: \"http://localhost:5000/users/authenticate\",\r\n        });\r\n    let resp = await data;\r\n    if (resp.data.id) {\r\n        dispatch({\r\n            type: REQUEST_USER_DATA_SUCCESS, payload: resp.data\r\n        })\r\n    } else {\r\n        dispatch({\r\n            type: REQUEST_USER_DATA_FAILED, payload: 'Incorrect email or password'\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}