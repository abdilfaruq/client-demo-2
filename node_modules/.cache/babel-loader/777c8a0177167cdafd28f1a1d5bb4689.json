{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding\\\\Learning\\\\ReactJS\\\\home6\\\\src\\\\index.js\";\nimport ReactDOM from 'react-dom';\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport { requestUserData, inputLoginDetails, submitRegisterDetails, inputRegisterDetails } from './redux/reducers';\nimport './index.css';\nimport App from './App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst logger = createLogger();\nconst rootReducer = combineReducers({\n  requestUserData,\n  inputLoginDetails,\n  inputRegisterDetails,\n  submitRegisterDetails\n});\n\nconst saveState = state => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('linguo-state', serializedState);\n  } catch {}\n};\n\nconst loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('linguo-state');\n\n    if (serializedState === null) {\n      return undefined;\n    }\n\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nconst persistedState = loadState();\nexport const store = createStore(rootReducer, persistedState, applyMiddleware(thunk, logger));\nstore.subscribe(() => saveState(store.getState()));\nReactDOM.render( /*#__PURE__*/_jsxDEV(ChakraProvider, {\n  children: /*#__PURE__*/_jsxDEV(Provider, {\n    store: store,\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 63,\n  columnNumber: 3\n}, this), document.getElementById('root'));","map":{"version":3,"sources":["D:/Coding/Learning/ReactJS/home6/src/index.js"],"names":["ReactDOM","ChakraProvider","Provider","createStore","applyMiddleware","combineReducers","createLogger","thunk","requestUserData","inputLoginDetails","submitRegisterDetails","inputRegisterDetails","App","logger","rootReducer","saveState","state","serializedState","JSON","stringify","localStorage","setItem","loadState","getItem","undefined","parse","err","persistedState","store","subscribe","getState","render","document","getElementById"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,SAASC,QAAT,QAAyB,aAAzB;AACA,SACEC,WADF,EAEEC,eAFF,EAGEC,eAHF,QAIO,OAJP;AAKA,SAASC,YAAT,QAA6B,cAA7B;AAEA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,SACEC,eADF,EAEEC,iBAFF,EAGEC,qBAHF,EAIEC,oBAJF,QAKO,kBALP;AAOA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;;AAEA,MAAMC,MAAM,GAAGP,YAAY,EAA3B;AACA,MAAMQ,WAAW,GAAGT,eAAe,CAAC;AAClCG,EAAAA,eADkC;AAElCC,EAAAA,iBAFkC;AAGlCE,EAAAA,oBAHkC;AAIlCD,EAAAA;AAJkC,CAAD,CAAnC;;AAOA,MAAMK,SAAS,GAAIC,KAAD,IAAW;AAC3B,MAAI;AACF,UAAMC,eAAe,GAAGC,IAAI,CAACC,SAAL,CAAeH,KAAf,CAAxB;AACAI,IAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCJ,eAArC;AACD,GAHD,CAGE,MAAM,CACP;AACF,CAND;;AAQA,MAAMK,SAAS,GAAG,MAAM;AACtB,MAAI;AACF,UAAML,eAAe,GAAGG,YAAY,CAACG,OAAb,CAAqB,cAArB,CAAxB;;AACA,QAAIN,eAAe,KAAK,IAAxB,EAA8B;AAC5B,aAAOO,SAAP;AACD;;AACD,WAAON,IAAI,CAACO,KAAL,CAAWR,eAAX,CAAP;AACD,GAND,CAME,OAAOS,GAAP,EAAY;AACZ,WAAOF,SAAP;AACD;AACF,CAVD;;AAYA,MAAMG,cAAc,GAAGL,SAAS,EAAhC;AAEA,OAAO,MAAMM,KAAK,GAAGzB,WAAW,CAC9BW,WAD8B,EAE9Ba,cAF8B,EAG9BvB,eAAe,CAACG,KAAD,EAAQM,MAAR,CAHe,CAAzB;AAMPe,KAAK,CAACC,SAAN,CAAgB,MAAMd,SAAS,CAACa,KAAK,CAACE,QAAN,EAAD,CAA/B;AAEA9B,QAAQ,CAAC+B,MAAT,eACE,QAAC,cAAD;AAAA,yBACE,QAAC,QAAD;AAAU,IAAA,KAAK,EAAEH,KAAjB;AAAA,2BACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF,EAMEI,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CANF","sourcesContent":["import ReactDOM from 'react-dom';\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\n\r\nimport { Provider } from 'react-redux';\r\nimport {\r\n  createStore,\r\n  applyMiddleware,\r\n  combineReducers\r\n} from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\n\r\nimport thunk from 'redux-thunk';\r\n\r\nimport { \r\n  requestUserData,\r\n  inputLoginDetails,\r\n  submitRegisterDetails,\r\n  inputRegisterDetails\r\n} from './redux/reducers';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({\r\n  requestUserData,\r\n  inputLoginDetails,\r\n  inputRegisterDetails,\r\n  submitRegisterDetails\r\n});\r\n\r\nconst saveState = (state) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state);\r\n    localStorage.setItem('linguo-state', serializedState);\r\n  } catch {\r\n  }\r\n};\r\n\r\nconst loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem('linguo-state');\r\n    if (serializedState === null) {\r\n      return undefined;\r\n    }\r\n    return JSON.parse(serializedState);\r\n  } catch (err) {\r\n    return undefined;\r\n  }\r\n}; \r\n\r\nconst persistedState = loadState();\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  persistedState,\r\n  applyMiddleware(thunk, logger)\r\n)\r\n\r\nstore.subscribe(() => saveState(store.getState()));\r\n\r\nReactDOM.render(\r\n  <ChakraProvider>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </ChakraProvider>,\r\n  document.getElementById('root')\r\n);"]},"metadata":{},"sourceType":"module"}