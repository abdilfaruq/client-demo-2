{"version":3,"file":"index.modern.js","sources":["../src/index.js"],"sourcesContent":["import React, { useEffect, useCallback, useState } from 'react';\nimport styles from './styles.module.css'\n\nconst defaultCardItems = [\n  (\n    <div key=\"key1\">\n      <h2>First Item</h2>\n      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n    </div>\n  ),\n  (\n    <div key=\"key2\">\n      <h2>Second Item</h2>\n      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n    </div>\n  ),\n  (\n    <div key=\"key3\">\n      <h2>Third Item</h2>\n      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n    </div>\n  )\n];\n\n\nconst setCardStatus = (indexes, cardIndex) => {\n  // console.log(indexes, cardIndex);\n  if (indexes.currentIndex === cardIndex) {\n    return  styles.active;\n  } else if (indexes.nextIndex === cardIndex) {\n    return styles.next;\n  } else if (indexes.previousIndex === cardIndex) {\n    return styles.prev;\n  }\n  return styles.inactive;\n}\n\nexport const StackedCarousel = ({ style, onCardChange, containerClassName, cardClassName, leftButton, rightButton, autoRotate=true, rotationInterval=2000, children}) => {\n  const cardItems = children || defaultCardItems;\n  const [indexes, setIndexes] = useState({\n    previousIndex: cardItems.length-1,\n    currentIndex: 0,\n    nextIndex: 1\n  });\n\n  const handleCardTransition = useCallback(() => {\n    // If we've reached the end, start again from the first card,\n    // but carry previous value over\n    if (indexes.currentIndex >= cardItems.length - 1) {\n      setIndexes({\n        previousIndex: cardItems.length - 1,\n        currentIndex: 0,\n        nextIndex: 1\n      });\n    } else {\n      setIndexes(prevState => ({\n        previousIndex: prevState.currentIndex,\n        currentIndex: prevState.currentIndex + 1 ,\n        nextIndex:\n          prevState.currentIndex + 2 === cardItems.length\n            ? 0\n            : prevState.currentIndex + 2\n      }));\n    }\n  }, [indexes.currentIndex]);\n\n  const handleLeftButton = useCallback(() => {\n    // If we've reached the end, start again from the first card,\n    // but carry previous value over\n    if (indexes.currentIndex <= 0) {\n      setIndexes({\n        previousIndex: cardItems.length - 2,\n        currentIndex: cardItems.length - 1,\n        nextIndex: 0\n      });\n\n    } else {\n      setIndexes(prevState => ({\n        nextIndex: prevState.currentIndex,\n        currentIndex: prevState.currentIndex - 1,\n        previousIndex:\n          prevState.currentIndex - 1 <= 0\n            ? cardItems.length - 1\n            : prevState.currentIndex - 2\n      }));\n    }\n  }, [indexes.currentIndex]);\n\n  \n  useEffect(() => {\n    onCardChange && onCardChange(indexes);\n    const transitionInterval = setInterval(() => {\n      autoRotate && handleCardTransition();\n    }, rotationInterval);\n    return () => clearInterval(transitionInterval);\n  }, [handleCardTransition, indexes, autoRotate]);\n\n  return (\n    <div className={`${styles.container}`}>\n      {\n        leftButton ?\n          <span onClick={handleLeftButton}>{leftButton}</span>\n          : <span className={styles.leftButton} onClick={handleLeftButton}>&lsaquo;</span>\n      }\n      <ul style={{...style}} className={`${styles.cardCarousel} ${containerClassName? containerClassName : styles.carouselDefault}`}>\n        {cardItems.map((card, index) => (\n          <li\n            key={card.key}\n            className={`${ cardClassName ? cardClassName : ''} ${styles.card} ${setCardStatus(indexes, index)}`}\n          >\n            { card }\n          </li>\n        ))}\n        </ul>\n      {\n        rightButton ?\n          <span onClick={handleCardTransition}>{rightButton}</span>\n          : <span className={styles.rightButton} onClick={handleCardTransition}>&rsaquo;</span>\n      }\n    </div>\n  );\n}\n\n\n"],"names":["defaultCardItems","setCardStatus","indexes","cardIndex","currentIndex","styles","active","nextIndex","next","previousIndex","prev","inactive","StackedCarousel","style","onCardChange","containerClassName","cardClassName","leftButton","rightButton","autoRotate","rotationInterval","children","cardItems","useState","length","setIndexes","handleCardTransition","useCallback","prevState","handleLeftButton","useEffect","transitionInterval","setInterval","clearInterval","container","cardCarousel","carouselDefault","map","card","index","key"],"mappings":"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"}